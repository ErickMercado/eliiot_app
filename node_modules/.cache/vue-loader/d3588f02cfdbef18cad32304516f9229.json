{"remainingRequest":"/Users/josepfm/Dreamworld/eliiot/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/josepfm/Dreamworld/eliiot/src/pages/Home/HomePage.html?vue&type=template&id=ffc2172c&","dependencies":[{"path":"/Users/josepfm/Dreamworld/eliiot/src/pages/Home/HomePage.html","mtime":1628003505738},{"path":"/Users/josepfm/Dreamworld/eliiot/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/josepfm/Dreamworld/eliiot/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}