{"remainingRequest":"/Users/josepfm/Dreamworld/eliiot/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/josepfm/Dreamworld/eliiot/src/pages/terms/TermsPage.html?vue&type=template&id=ebec438c&scoped=true&","dependencies":[{"path":"/Users/josepfm/Dreamworld/eliiot/src/pages/terms/TermsPage.html","mtime":1627573140513},{"path":"/Users/josepfm/Dreamworld/eliiot/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/josepfm/Dreamworld/eliiot/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}